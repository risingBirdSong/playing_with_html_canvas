{"version":3,"sources":["colors.ts","manycircles.ts"],"names":[],"mappings":"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","file":"manycircles.6d82dd49.js","sourceRoot":"..\\manyCircles","sourcesContent":["export let clrsA = [\"#CD88AF\", \"#AA5585\", \"#882D61\", \"#661141\", \"#440027\"];\r\nexport let clrsB = [\"#F8A6AC\",\"#CF676F\",\"#A6373F\",\"#7C151C\",\"#530006\",] ;\r\nexport let clrsC = [\"#FFD1AA\",\"#D49A6A\",\"#AA6C39\",\"#804515\",\"#552600\",] ;\r\nexport let clrsD = [\"#7BB992\",\"#4D9A6A\",\"#297B48\",\"#0F5D2C\",\"#003E17\",] ;\r\nexport let clrsE = [\"#7F81B1\",\"#545894\",\"#333676\",\"#191C59\",\"#080B3B\",] ;","console.log(\"testing\");\r\n\r\nimport { clrsA, clrsB, clrsC, clrsD, clrsE } from \"./colors\";\r\n\r\n\r\nlet canvas: HTMLCanvasElement = document.querySelector(\"canvas\") as HTMLCanvasElement;\r\nconst context: CanvasRenderingContext2D = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\ncanvas.width = window.innerWidth;\r\ncanvas.height = window.innerHeight;\r\n\r\n// context.beginPath();\r\n// context.arc(canvas.width / 2, canvas.height / 2, 30, 0, Math.PI * 2);\r\n// context.fillStyle = \"red\";\r\n// context.fill();\r\n\r\n// let circle = new Circle(canvas, context);\r\n\r\nexport let mouse = {\r\n    x: 0,\r\n    y: 0\r\n}\r\n\r\nwindow.addEventListener(\"mousemove\", (event) => {\r\n    mouse.x = event.x;\r\n    mouse.y = event.y;\r\n})\r\n\r\n\r\nclass Circle {\r\n\r\n    public canvas: HTMLCanvasElement\r\n    public context: CanvasRenderingContext2D\r\n\r\n    public x: number;\r\n    public y: number;\r\n\r\n    public dx: number;\r\n    public dy: number;\r\n\r\n    public radius: number;\r\n    public originalRadius: number = this.radius;\r\n    public begin: number = 0;\r\n    public end: number = Math.PI * 2;\r\n\r\n    public mouseRangeInteract : number = 100;\r\n    public growthRate : number = 4;\r\n\r\n    public maxGrowth : number = (Math.random()*100) +10;\r\n\r\n\r\n    constructor(public color: string) {\r\n\r\n        this.canvas = canvas;\r\n        this.context = context;\r\n\r\n        this.radius = (Math.random() * 30) + 2;\r\n        this.originalRadius = this.radius;\r\n\r\n        this.x = Math.random() * (this.canvas.width - this.radius * 2) + this.radius;\r\n        this.y = Math.random() * (this.canvas.height - this.radius * 2) + this.radius;\r\n\r\n        this.dx = Math.random() * 3;\r\n        this.dy = Math.random() * 3;\r\n    }\r\n\r\n    public draw = () => {\r\n        this.context.beginPath();\r\n        this.context.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\r\n        this.context.fillStyle = this.color;\r\n        this.context.fill();\r\n        this.context.closePath();\r\n    }\r\n\r\n\r\n    public update = () => {\r\n\r\n\r\n        this.x += this.dx;\r\n        this.y += this.dy;\r\n\r\n        if (this.x + this.radius > window.innerWidth || this.x - this.radius < 0) {\r\n            this.dx = -this.dx;\r\n        }\r\n        if (this.y + this.radius > window.innerHeight || this.y - this.radius < 0) {\r\n            this.dy = -this.dy;\r\n        }\r\n\r\n        if (mouse.x - this.x < this.mouseRangeInteract && mouse.x - this.x > -this.mouseRangeInteract\r\n            && mouse.y - this.y < this.mouseRangeInteract && mouse.y - this.y > -this.mouseRangeInteract\r\n        ) {\r\n            while (this.radius < this.maxGrowth){\r\n                this.radius += this.growthRate;\r\n            }\r\n        }\r\n\r\n        else if (this.radius >= this.originalRadius) {\r\n            this.radius --;\r\n        }\r\n\r\n\r\n        this.draw();\r\n    }\r\n\r\n    public animate = () => {\r\n\r\n\r\n\r\n        // this.context.clearRect(0,0, innerWidth, innerHeight);\r\n    }\r\n}\r\n\r\nlet allCircles: Circle[] = [];\r\n\r\nlet clrs = clrsA;\r\n\r\n\r\nfor (let i = 0; i < 300; i++) {\r\n    allCircles.push(new Circle(clrs[Math.floor(Math.random() * clrs.length)]));\r\n}\r\nlet testCircle = new Circle(clrsA[0]);\r\ntestCircle.draw();\r\n\r\nfunction animate() {\r\n    requestAnimationFrame(animate);\r\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\r\n    for (let c of allCircles) {\r\n        c.update();\r\n    }\r\n}\r\n\r\nanimate();\r\n\r\n\r\n\r\n// context.stroke();\r\n"]}